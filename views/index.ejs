<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Programming Visualization Tool</title>
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <header>
        <h1>Dynamic Programming Visualization Tool</h1>
    </header>

    <main>
        <section>
            <p> This tool allows you to input a recursive formula, identify its variables,
                set base cases, and visualize the computation of the function. Use it to understand 
                how dynamic programming optimizes repetitive recursive calls through either 
                <strong>Top-down (Memoization)</strong> or <strong>Bottom-up (Tabulation)</strong> methods.</p>
        </section>

        <!-- <section>
            <label for="formula-select">Select Formula Type:</label>
            <select id="formula-select">
                <option value="custom" selected>Custom</option>
                <option value="RodCutting">Rod Cutting</option>
            </select>
        </section> -->

        <section>
            <h2>Example Formulas</h2>
            <ul>
                <li>
                    <strong>Fibonacci:</strong> 
                    <code>n <= 1 ? n : F(n-1) + F(n-2)</code>, 
                    <em>Base Cases:</em> <code>F(0)=0, F(1)=1</code>
                </li>
                <li>
                    <strong>Factorial:</strong> 
                    <code>n == 0 ? 1 : n * F(n-1)</code>, 
                    <em>Base Case:</em> <code>F(0)=1</code>
                </li>
                <li>
                    <strong>Pascal’s Triangle:</strong> 
                    <code>k == 0 || k == n ? 1 : F(n-1,k-1) + F(n-1,k)</code>, 
                    <em>Base Case:</em> <code>F(0,0)=1</code>
                </li>
            </ul>
            <p>Copy and paste these into the fields below to test the tool. Adjust the parameters and watch the visualization update.</p>
            <p>
                <strong>Note:</strong> 
                The <em>Bottom-up</em> approach is currently implemented for these three patterns 
                (Fibonacci, Factorial, and Pascal’s Triangle). Other formulas can still be run 
                with <em>Top-down</em> but may require extended logic for bottom-up.
            </p>
        </section>

        <section>
            <h2>Define Your Recursive Function</h2>
            <label for="recursive-formula">Recursive Formula (including condition):</label><br>
            <input type="text" id="recursive-formula" placeholder="e.g., n <= 1 ? n : F(n-1) + F(n-2)"><br><br>

            <label for="base-cases">Base Case(s):</label><br>
            <input type="text" id="base-cases" placeholder="e.g., F(0)=0, F(1)=1"><br><br>
            
            <button id="submit-formula">Parse & Prepare</button>
        </section>

        <section id="parameters-section" style="display: none;">
            <% if (variables && variables.length > 0) { %>
                <h2>Set Parameters</h2>
                <p>Enter values for the identified variable(s) and choose a solving method.</p>
                <% variables.forEach(variable => { %>
                    <div>
                        <label for="input-<%= variable %>">Value for "<%= variable %>":</label>
                        <input type="text" id="input-<%= variable %>" placeholder="e.g., 10">
                    </div>
                <% }); %>
                <div>
                    <label for="max-recursions">Max Recursions Allowed (Optional):</label>
                    <input type="number" id="max-recursions" placeholder="e.g., 100">
                </div>
                <div>
                    <label>Solving Method:</label><br>
                    <input type="radio" id="top-down" name="solving-method" value="top-down" checked>
                    <label for="top-down">Top-down</label><br>
                    <input type="radio" id="bottom-up" name="solving-method" value="bottom-up">
                    <label for="bottom-up">Bottom-up</label>
                </div>
            <% } %>
        </section>

        <section id="controls" style="display: none;">
            <h2>Control Panel</h2>
            <p>Use these buttons to visualize the computation steps or view the final result immediately.</p>
            <button id="restart-button">Restart</button>
            <button id="view-step-button">View Next Step</button>
            <button id="view-full-button">Compute & View Result</button>
        </section>

        <section id="visualization-section" style="display: none;">
            <h2>Visualization</h2>
            <p>Below is a step-by-step representation of the call stack as the recursion unfolds in a top-down approach. 
                For a bottom-up approach, you will see each step filling the array or table, starting with the base cases and building up to the final answer.</p>
            <div id="visualization-container"></div>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 Dynamic Programming Visualization Tool</p>
    </footer>

    <script src="/js/script.js"></script>
</body>
</html>
